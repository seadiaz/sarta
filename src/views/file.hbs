<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no">

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      <div class="row">
        <div class="col-sm-6 offset-sm-3">
          <h1>Welcome to Sarta!</h1>

          <div class="row">
            <div class="col-sm-12">
              My ID: <span id="p2p-id"></span>
            </div>
            <div class="col-sm-12">
              Socket status: <span id="socket-status"></span>
            </div>
            <div class="col-sm-12">
              P2P status: <span id="p2p-status"></span>
            </div>
            <div class="col-sm-12" id="drop-zone" style="border: 1px solid black; height: 300px;">
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" integrity="sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="/assets/socket.io-p2p.js"></script>
    <script>
    $(function () {
      $('form').submit(function(e){ e.preventDefault(); });
      let socket = io()

      function base64ToArrayBuffer(base64) {
        let binaryString =  window.atob(base64);
        let binaryLen = binaryString.length;
        let bytes = new Uint8Array(binaryLen);
        for (let i = 0; i < binaryLen; i++)        {
            let ascii = binaryString.charCodeAt(i);
            bytes[i] = ascii;
        }
        return bytes;
      }

      socket.on('connect', () => {
        $('#socket-status').html('ðŸ˜ƒ')
        console.log('Connected!')
        socket.emit('greetings', {message:'Hi there!'})
        socket.on('greetings', (data) => {
          console.info('Greetings:', data)
        })
      });

      socket.on('disconnect', () => {
        $('#socket-status').html('ðŸ˜”')
        console.log('Disconnected!')
      });

      let opts = {}
      let p2pSocket = new P2P(socket, opts, () => {
        console.log('p2p connected!')
        $('#p2p-status').html('ðŸ˜ƒ')
        $('#p2p-id').html(p2pSocket.peerId)
        p2pSocket.emit('peer-msg', {message:'Hello there. I am ', id: p2pSocket.peerId})
      })

      p2pSocket.on('peer-msg', (data) => {
        console.log('From a peer: %s', JSON.stringify(data))
        p2pSocket.useSockets = false
        $('#p2p-status').html('ðŸ˜ƒ')
        $('#p2p-id').html(p2pSocket.peerId)
      });

      p2pSocket.on('file', (data) => {
        console.log('File:', data.name)
        let content = data.file.replace(/^data:.*;base64,/, '')
        let contentType = /^data:(.*);base64,/.exec(data.file)[1]
        let fileBytes = base64ToArrayBuffer(content)
        let blob = new window.Blob([fileBytes], {type: contentType})
        let urlCreator = window.URL || window.webkitURL
        let fileUrl = urlCreator.createObjectURL(blob)
        let a = document.createElement('a')
        a.href = fileUrl
        a.download = data.name
        a.value = data.name
        a.click()
        window.URL.revokeObjectURL(fileUrl)
      });

      function handleFileSelect(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        let file = evt.dataTransfer.files[0];
        let reader  = new FileReader();
        reader.addEventListener('load', (evnt) => {
          console.log(file.name)
          p2pSocket.emit('file', {file: evnt.target.result, name: file.name, type: file.type, size:file.size})
          console.log('p2p emit done')
        }, false);

        reader.readAsDataURL(file);
      }

      function handleDragOver(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = 'copy';
      }

      var dropZone = document.getElementById('drop-zone');
      dropZone.addEventListener('dragover', handleDragOver, false);
      dropZone.addEventListener('drop', handleFileSelect, false);
    });
    </script>
  </body>
</html>
